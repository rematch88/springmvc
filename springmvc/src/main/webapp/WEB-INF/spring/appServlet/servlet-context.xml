<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- aop 설정
	com.pk.db 패키지에 있는 Controller라는 이름으로 끝나는 클래스의
	메소드이름은 상관없고 매개변수개수도 상관없이 호출만 되면
	LoggingAdvice 클래스의 invoke 메소드가 호출됩니다.-->
	<aop:config>
		<aop:aspect id="traceAspect" ref="loggingAdvice">
			<aop:pointcut id="publicMethod"
			expression="execution(public * com.pk.db..*Controller.*(..))" />
			<aop:around pointcut-ref="publicMethod" method="invoke"/>
		</aop:aspect>
	</aop:config>
	<!-- 어노테이션을 추가한 AOP 클래스가 동작하도록 해주는 설정 -->
	<aop:aspectj-autoproxy />
	
	<!-- interceptor 설정 : chat으로 이동할 때
	interceptor가 동작하도록 설정 -->
	<interceptors>
		<interceptor>
			<mapping path="/chat"/>
			<beans:ref bean="authInterceptor" />
		</interceptor>
	</interceptors>
	
	<!-- spring mvc project와 관련된 설정
	어노테이션을 사용할 수 있도록 해주는 설정 -->
	<annotation-driven />

	<!-- css, js, img 파일 들을 캐싱해주는 디렉토리 설정 -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Controller에서 리턴하는 뷰 이름을 가지고 실제 출력할 뷰를 선택하도록 해주는 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<!-- 우선순위를 수정 -->
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<!-- html 이외의 출력을 위한 ViewResolver 설정 -->
	<beans:bean
	class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0" />
	</beans:bean>
	
	<!-- Controller가 리턴한 뷰이름과 뷰 클래스 매핑 -->
	<beans:bean id="excel" class="com.pk.db.view.ExcelView" />
	<beans:bean id="pdf" class="com.pk.db.view.PdfView" />
	<beans:bean id="item1json" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
	
	<!-- XML 출력을 위한 클래스 설정 -->
	<beans:bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller" id="marshaller">
		<beans:property name="classesToBeBound">
			<beans:list>
				<beans:value>com.pk.db.domain.ItemReport</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!-- XML 뷰 설정 
	id는 Controller가 리턴한 View이름이고
	modelKey에 설정하는 것은 model에 저장한 데이터 이름입니다.-->
	<beans:bean id="xmlreport" class="org.springframework.web.servlet.view.xml.MarshallingView">
		<beans:property name="marshaller" ref="marshaller" />
		<beans:property name="modelKey" value="list" />
	</beans:bean>
	
	<!-- 어노테이션이 붙은 클래스의 Bean을 자동으로 생성해주는 패키지를 설정 -->
	<context:component-scan base-package="com.pk.db" />
	
	<!-- Controller가 처리하지 못하는 요청은 WAS가 처리하도록 해주는 요청 -->
	<default-servlet-handler/>
	
	<!-- 하이버네이트는 트랜잭션 사용이 필수 -->
	<tx:annotation-driven />
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="sessionFactory"></beans:property>
	</beans:bean>
	
	<!-- 파일 업로드를 처리할 Bean(spring이 생성하고 관리하는 Instance)을 생성 -->
	<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
	id="multipartResolver">
	</beans:bean>
	
	<!-- WebSocket 클래스와 URL 매핑 -->
	<websocket:handlers>
		<!-- handler에서 bean의 id를 작성하고 path는 클라이언트가 접속할 URL -->
		<websocket:mapping handler="chatHandler" path="/chat-ws"/>
	</websocket:handlers>
	
	
</beans:beans>
